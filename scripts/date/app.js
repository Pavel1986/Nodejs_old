var Express = require('express')  , Http = require('http' )  , Path = require('path')  , fs = require('fs')  , Dot = require('dot')  , async = require('async');// Параметры соединения mongodb://пользователь;пароль@ip/база данныхvar Mongoose = require('mongoose').connect('mongodb://test:test@127.0.0.1/test');//Схема обсужденияvar TopicSchema = new Mongoose.Schema({    Name : { type : String },    Datetime_created : { type : Number},      //Во сколько создано обсуждение    Datetime_started : { type : Number},      //Во сколько оно перешло в статус Processed    Datetime_changed : { type : Number},      //Во сколько изменилось    Datetime_temp_closing_ux : { type : Number}, //Прдверительное время закрытия, может меняться, если участники захотят продлить    Datetime_closed : { type : Number}       //Время закрытия обсуждения, переход в Closed}, { collection : "test" });Topic = Mongoose.model('Topic', TopsicSchema);var App = Express();App.configure(function(){  App.set('port', 3000);//  App.use(Express.logger('dev')); // Время генерации страницы  App.use(Express.compress());  //Шаблонизация    App.set('view engine', Dot);  App.enable('view cache');  App.set('views', __dirname + '/views');  App.engine('.html', require('express-dot').__express);    App.use(Express.favicon());  App.use(Express.bodyParser());  App.use(Express.methodOverride());  //Стили  App.use(require('stylus').middleware(__dirname + '/public'));  App.use(Express.static(__dirname + '/public'));  App.use(Express.static(Path.join(__dirname, 'public')));});App.configure('development', function(){ App.use(Express.errorHandler());});App.get('/', function(Req, Res){    var Start_time = new Date();    var Temp_time = new Date();    console.log(typeof (Temp_time));    console.log("Starting time at : " + Start_time);    var second = 1000;    var minute = 60 * second;    var setTime = 30 * second;    //Temp_time.setTime(Temp_time.getTime() + setTime);    var Temp_time_set_ux = Temp_time.getTime() + setTime;    console.log("~Stopping time at : " + Temp_time_set_ux + ', type of ' + typeof (Temp_time_set_ux));    console.log(new Date(Temp_time_set_ux));/*    Datetime_created : { type : Date},      //Во сколько создано обсуждение    Datetime_started : { type : Date},      //Во сколько оно перешло в статус Processed    Datetime_changed : { type : Date},      //Во сколько изменилось    Datetime_temp_closing : { type : Date}, //Прдверительное время закрытия, может меняться, если участники захотят продлить    Datetime_closed : { type : Date},     */    Topic.findOneAndUpdate( { Name : "Topic1" }, { Datetime_created : Start_time, Datetime_temp_closing_ux : Temp_time_set_ux  }, { "upsert" : true }, function(err, doc){        if(err){            console.log(err);        }        setTimeout(function(){            //var Finish_Time = new Date();            //var Finish_Time_Start = Finish_Time.toTimeString();            console.log('Stopping timer at : ' + new Date());        }, setTime);    });    Res.render('index.html', {        title : "Index",        layout: false    });});Server = Http.createServer(App)    , Io = require('socket.io').listen(Server);Server.listen(App.get('port'), function(){    console.log("Server listening on port " + App.get('port'));});