var Express = require('express')    , Http = require('http' )    , Path = require('path')    , fs = require('fs')    , Dot = require('dot')    , async = require('async');var Mongoose = require('mongoose').connect('mongodb://localhost/debates');var App = Express();App.configure(function(){    App.set('port', 3000);//  App.use(Express.logger('dev')); // Время генерации страницы    App.use(Express.compress());    //Шаблонизация    App.set('view engine', Dot);    App.enable('view cache');    App.set('views', __dirname + '/views');    App.engine('.html', require('express-dot').__express);    App.use(Express.favicon());    App.use(Express.bodyParser());    App.use(Express.methodOverride());    //Стили    App.use(require('stylus').middleware(__dirname + '/public'));    App.use(Express.static(__dirname + '/public'));    App.use(Express.static(Path.join(__dirname, 'public')));});App.configure('development', function(){    App.use(Express.errorHandler());});App.get('/', function(Req, Res){    var PropertiesSchema = new Mongoose.Schema({        Properties : {            _id: { type : String },            Code : { type : String },            Name : {},            Type : { type : String },            Values : {}        }    }, { collection : "debates" })    var DebateProperties_Model = Mongoose.model('Property', PropertiesSchema);    //function UpdateProperty(Code, arName, arValues, DebatePropertiesSchema){    //Проверяем входные данные, если Name содержит структуру ассоциативного массива    /* var NameType = typeof(arName);    if((NameType != "string") && (NameType != "object")){        console.log("Input error. Check arName syntax.");    }    //Находим свойство по коду    var DebateProperties_Model = Mongoose.model("Property", DebatePropertiesSchema);    Записываем новое свойство *//*    var NewInstance = new DebateProperties_Model({        Properties : {            Code : Code,            Name : arName        }    }).save();                       */    /*****************************/    //var arResult = DebateProperties_Model.find( { "Properties.Code" : "Status"  } , function (err, arResult) {  /*    var arResult = DebateProperties_Model.find( { "Properties" : { $gt : {} }  } , function (err, arResult) {        if (err) { console.log("Error finding property. Check syntax."); }        if(arResult){            console.log("Found");            console.log(arResult);            return arResult;        }else{            console.log("Not found");            console.log(arResult);            return false;        }    });*/    /*}).gt( "Properties.Code", {} );*/    //!!!!! Надо попробовать сделать запрос и получить данные, только если заполнено поле Status    //Если оно есть:    //Заменяем массив Name, на тот, который получили    //Смотрим тип созданного ранее свойства, если оно совпадает со присланным - обновляем    //Если его нет - создаём    // }    //UpdateProperty("Status", arName);    /*     var Property = new DebateProperties_Model({     Properties: {     Code : "Status",     Name : {     ru : "Status_ru",     lv : "Status_lv",     en : "Status_en"     },     Type : "L",     Values : [     { ID : "7373737",     NAME : {     ru : "Value_ru",     lv : "Value_lv",     en : "Value_en"     }     }     ]     }});     Property.save();           */    Res.render('index.html', {        title : "Index",        layout: false    });});Server = Http.createServer(App)    , Io = require('socket.io').listen(Server);Server.listen(App.get('port'), function(){    console.log("Server listening on port " + App.get('port'));});